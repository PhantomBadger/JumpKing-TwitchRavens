<Window x:Class="JumpKingRavensMod.Install.UI.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:System="clr-namespace:System;assembly=mscorlib"
        xmlns:Input="clr-namespace:Microsoft.Xna.Framework.Input;assembly=MonoGame.Framework"
        xmlns:local="clr-namespace:JumpKingRavensMod.Install.UI"
        xmlns:ravenSettings="clr-namespace:JumpKingRavensMod.Settings;assembly=JumpKingRavensMod.Settings"
        xmlns:modifierSettings="clr-namespace:JumpKingModifiersMod.Settings;assembly=JumpKingModifiersMod.Settings"
        mc:Ignorable="d"
        Title="Jump King Chat Ravens Mod Installer" SizeToContent="WidthAndHeight" Background="{DynamicResource {x:Static SystemColors.ControlBrushKey}}">
   
    <Window.Resources>
        <BooleanToVisibilityConverter x:Key="boolToVisibilityConverter" />

        <ObjectDataProvider x:Key="keysEnumValues" MethodName="GetValues" ObjectType="{x:Type System:Enum}">
            <ObjectDataProvider.MethodParameters>
                <x:Type TypeName="Input:Keys"/>
            </ObjectDataProvider.MethodParameters>
        </ObjectDataProvider>

        <Style x:Key="ToggleFlipSwitchStyle" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource {x:Type ToggleButton}}">
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <StackPanel Orientation="Horizontal">
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            <Border x:Name="on" Width="60" Height="25" Background="LightGray" CornerRadius="2,0,0,4" Margin="10,0,0,0">
                                <TextBlock x:Name="onText" Text="Twitch" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                            </Border>
                            <Border x:Name="off" Width="60" Height="25" Background="LightGray" CornerRadius="0,2,4,0">
                                <TextBlock x:Name="offText" Text="YouTube" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                            </Border>
                        </StackPanel>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="true">
                                <Setter TargetName="on" Property="Background" Value="#6441a5"/>
                                <Setter TargetName="onText" Property="Foreground" Value="White"/>
                            </Trigger>
                            <Trigger Property="IsChecked" Value="False">
                                <Setter TargetName="off" Property="Background" Value="#FF0000"/>
                                <Setter TargetName="offText" Property="Foreground" Value="White"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="#ADADAD"/>
                                <Setter TargetName="on" Property="Background" Value="LightGray"/>
                                <Setter TargetName="onText" Property="Foreground" Value="DarkGray"/>
                                <Setter TargetName="off" Property="Background" Value="LightGray"/>
                                <Setter TargetName="offText" Property="Foreground" Value="DarkGray"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="ToggleFlipSwitchFeedbackDeviceStyle" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource {x:Type ToggleButton}}">
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <StackPanel Orientation="Horizontal">
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            <Border x:Name="on" Width="60" Height="25" Background="LightGray" CornerRadius="2,0,0,4" Margin="10,0,0,0">
                                <TextBlock x:Name="onText" Text="None" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                            </Border>
                            <Border x:Name="off" Width="60" Height="25" Background="LightGray" CornerRadius="0,2,4,0">
                                <TextBlock x:Name="offText" Text="PiShock" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                            </Border>
                        </StackPanel>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="true">
                                <Setter TargetName="on" Property="Background" Value="#474747"/>
                                <Setter TargetName="onText" Property="Foreground" Value="White"/>
                            </Trigger>
                            <Trigger Property="IsChecked" Value="False">
                                <Setter TargetName="off" Property="Background" Value="#0011ff"/>
                                <Setter TargetName="offText" Property="Foreground" Value="White"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="#ADADAD"/>
                                <Setter TargetName="on" Property="Background" Value="LightGray"/>
                                <Setter TargetName="onText" Property="Foreground" Value="DarkGray"/>
                                <Setter TargetName="off" Property="Background" Value="LightGray"/>
                                <Setter TargetName="offText" Property="Foreground" Value="DarkGray"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </Window.Resources>
    
    <DockPanel>
        <Menu DockPanel.Dock="Top" Padding="2,0,0,2">
            <MenuItem Header="_File">
                <MenuItem Header="_About" Click="About_Click"/>
                <Separator/>
                <MenuItem Header="_Quit" Click="Quit_Click"/>
            </MenuItem>
        </Menu>
        <GroupBox Header="Install" DockPanel.Dock="Top">
            <StackPanel>
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>
                    <Grid.Resources>
                        <ToolTip x:Key="installDirectoryTooltip" DataContext="{Binding Path=PlacementTarget, RelativeSource={x:Static RelativeSource.Self}}">
                            <TextBlock>
                                The Jump King directory containing the JumpKing.exe file
                            </TextBlock>
                        </ToolTip>
                        <ToolTip x:Key="modDirectoryTooltip" DataContext="{Binding Path=PlacementTarget, RelativeSource={x:Static RelativeSource.Self}}">
                            <TextBlock>
                                The directory containing the Mod .dlls in the install package
                            </TextBlock>
                        </ToolTip>
                    </Grid.Resources>
                    <!-- Install Directory -->
                    <TextBlock Grid.Row="0" Grid.Column="0" Margin="5,2,10,2" Text="Install Directory:" ToolTip="{StaticResource installDirectoryTooltip}" />
                    <TextBox Grid.Row="0" Grid.Column="1" Margin="0,2,0,2" Text="{Binding GameDirectory, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" ToolTip="{StaticResource installDirectoryTooltip}" />
                    <Button Grid.Row="0" Grid.Column="2" Margin="5,2,0,2" Content="..." MinWidth="30" MaxWidth="30" Command="{Binding BrowseGameDirectoryCommand}" />
                    <!-- Mod Directory -->
                    <TextBlock Grid.Row="1" Grid.Column="0" Margin="5,2,10,2" Text="Mod Directory:" ToolTip="{StaticResource modDirectoryTooltip}"/>
                    <TextBox Grid.Row="1" Grid.Column="1" Margin="0,2,0,2" Text="{Binding ModDirectory, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" ToolTip="{StaticResource modDirectoryTooltip}"/>
                    <Button Grid.Row="1" Grid.Column="2" Margin="5,2,0,2" Content="..." MinWidth="30" MaxWidth="30" Command="{Binding BrowseModDirectoryCommand}" />
                </Grid>
                <!-- Install Error -->
                <TextBlock Text="{Binding InstallErrorMessage}" Foreground="Red" Visibility="{Binding ShowInstallErrorMessage, Converter={StaticResource boolToVisibilityConverter}}"/>
                <!-- Install Button-->
                <Button Content="Install" MaxWidth="70" MinWidth="70" Margin="5" HorizontalAlignment="Right" Command="{Binding InstallCommand}"/>
            </StackPanel>
        </GroupBox>
            
        <!-- Settings -->
        <GroupBox Header="Settings" DockPanel.Dock="Top">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                <ToggleButton Grid.Row="0" Content="Streaming Platform:" Margin="2,2,10,2" IsEnabled="{Binding RavensSettings.AreRavenModSettingsLoaded}" Style="{StaticResource ToggleFlipSwitchStyle}" IsChecked="{Binding StreamingSettings.IsStreamingOnTwitch, Mode=TwoWay}" Checked="ToggleButton_Checked" Unchecked="ToggleButton_Unchecked"/>
                <ToggleButton Grid.Row="1" Content="Feedback Device:" Margin="2,2,10,2" IsEnabled="{Binding RavensSettings.AreRavenModSettingsLoaded}" Style="{StaticResource ToggleFlipSwitchFeedbackDeviceStyle}" IsChecked="{Binding FeedbackDeviceSettings.IsUsingNoDevice, Mode=TwoWay}" Checked="ToggleButtonFeedbackDevice_Checked"/>
                <TabControl Grid.Row="2" x:Name="tabControl" IsEnabled="{Binding RavensSettings.AreRavenModSettingsLoaded}" Background="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" Padding="5" SelectedIndex="0">
                    <TabItem x:Name="tabItemTwitch" Header="Twitch" Visibility="{Binding StreamingSettings.IsStreamingOnTwitch, Converter={StaticResource boolToVisibilityConverter}}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <Grid.Resources>
                                <ToolTip x:Key="twitchAccountTooltip" DataContext="{Binding Path=PlacementTarget, RelativeSource={x:Static RelativeSource.Self}}">
                                    <TextBlock>
                                        The Twitch Account to use for listening to the chat.
                                        <LineBreak/>
                                        This will only allow us to read messages using this account, not send them.
                                    </TextBlock>
                                </ToolTip>
                                <ToolTip x:Key="oAuthTooltip" DataContext="{Binding Path=PlacementTarget, RelativeSource={x:Static RelativeSource.Self}}">
                                    <TextBlock>
                                        This OAuth token gives us permission to use the account. 
                                        <LineBreak/>
                                        This token should not be shared with anyone else.
                                    </TextBlock>
                                </ToolTip>
                            </Grid.Resources>
                            <!-- Twitch Account -->
                            <TextBlock Grid.Row="0" Grid.Column="0" Margin="5,2,10,2" ToolTip="{StaticResource twitchAccountTooltip}" Text="Twitch Account Name:" />
                            <TextBox Grid.Row="1" Grid.Column="0" Margin="0,2,0,2" Text="{Binding TwitchSettings.TwitchAccountName, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" IsEnabled="{Binding RavensSettings.AreRavenModSettingsLoaded}" ToolTip="{StaticResource twitchAccountTooltip}"/>
                            <!-- OAuth -->
                            <TextBlock Grid.Row="2" Grid.Column="0" Margin="5,2,10,2" ToolTip="{StaticResource oAuthTooltip}" Text="Twitch OAuth:" />
                            <TextBlock Grid.Row="3" Grid.Column="0" Margin="5,0,10,0" FontSize="9" ToolTip="{StaticResource oAuthTooltip}">
                                <Italic>
                                    You shouldn't show this to anyone!
                                    To generate an OAuth Token,
                                    <Hyperlink NavigateUri="https://github.com/PhantomBadger/JumpKing-TwitchRavens/blob/main/docs/HowToGenerateCredentials.md#twitch" RequestNavigate="Hyperlink_RequestNavigate">click here</Hyperlink>
                                </Italic>
                            </TextBlock>
                            <TextBox Grid.Row="4" Grid.Column="0" Margin="0,2,0,2" Text="{Binding TwitchSettings.TwitchOAuth, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" IsEnabled="{Binding RavensSettings.AreRavenModSettingsLoaded}" ToolTip="{StaticResource oAuthTooltip}"/>
                        </Grid>
                    </TabItem>
                    <TabItem x:Name="tabItemYouTube" Header="YouTube" Visibility="{Binding StreamingSettings.IsStreamingOnYouTube, Converter={StaticResource boolToVisibilityConverter}}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <Grid.Resources>
                                <ToolTip x:Key="youTubeAccountTooltip" DataContext="{Binding Path=PlacementTarget, RelativeSource={x:Static RelativeSource.Self}}">
                                    <TextBlock>
                                        The name of the YouTube Channel to Listen to
                                        <LineBreak/>
                                        We will look for active streams on this account and listen for chat messages
                                    </TextBlock>
                                </ToolTip>
                                <ToolTip x:Key="youTubeAPITooltip" DataContext="{Binding Path=PlacementTarget, RelativeSource={x:Static RelativeSource.Self}}">
                                    <TextBlock>
                                        This YouTube API token gives this application permission to use YouTube's API
                                    </TextBlock>
                                </ToolTip>
                            </Grid.Resources>
                            <!-- YouTube Account -->
                            <TextBlock Grid.Row="0" Grid.Column="0" Margin="5,2,10,2" ToolTip="{StaticResource youTubeAccountTooltip}" Text="YouTube Account Name:" />
                            <TextBox Grid.Row="1" Grid.Column="0" Margin="0,2,0,2" Text="{Binding YouTubeSettings.YouTubeAccountName, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" IsEnabled="{Binding RavensSettings.AreRavenModSettingsLoaded}" ToolTip="{StaticResource youTubeAccountTooltip}"/>
                            <!-- API Key -->
                            <TextBlock Grid.Row="2" Grid.Column="0" Margin="5,2,10,2" ToolTip="{StaticResource youTubeAPITooltip}" Text="YouTube API Key:" />
                            <TextBlock Grid.Row="3" Grid.Column="0" Margin="5,0,10,0" FontSize="9" ToolTip="{StaticResource youTubeAPITooltip}">
                                <Italic>
                                    You shouldn't show this to anyone!
                                    To generate this API key
                                    <Hyperlink NavigateUri="https://github.com/PhantomBadger/JumpKing-TwitchRavens/blob/main/docs/HowToGenerateCredentials.md#youtube" RequestNavigate="Hyperlink_RequestNavigate">click here</Hyperlink>
                                </Italic>
                            </TextBlock>
                            <TextBox Grid.Row="4" Grid.Column="0" Margin="0,2,0,2" Text="{Binding YouTubeSettings.YouTubeAPIKey, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" IsEnabled="{Binding RavensSettings.AreRavenModSettingsLoaded}" ToolTip="{StaticResource youTubeAPITooltip}"/>
                            <!-- Connect Key -->
                            <TextBlock Grid.Row="5" Grid.Column="0" Grid.ColumnSpan="2" Margin="5,2,10,2" IsEnabled="{Binding RavensSettings.AreRavenModSettingsLoaded}" Text="Connect Key:" ToolTip="When pressed this will cause the mod to connect/disconnect from the YouTube Stream" />
                            <ComboBox Grid.Row="6" Grid.Column="0" Grid.ColumnSpan="2" IsEnabled="{Binding RavensSettings.AreRavenModSettingsLoaded}" ItemsSource="{Binding Source={StaticResource keysEnumValues}}" SelectedItem="{Binding YouTubeSettings.ConnectKey, Mode=TwoWay}" ToolTip="When pressed this will cause the mod to connect/disconnect from the YouTube Stream"/>
                        </Grid>
                    </TabItem>
                    <TabItem x:Name="tabItemPiShock" Header="PiShock" Visibility="{Binding FeedbackDeviceSettings.IsUsingPiShock, Converter={StaticResource boolToVisibilityConverter}}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <Grid.Resources>
                                <ToolTip x:Key="pishockUsernameTooltip" DataContext="{Binding Path=PlacementTarget, RelativeSource={x:Static RelativeSource.Self}}">
                                    <TextBlock>
                                        Your username for the PiShock API, required to make requests to your PiShock device.
                                    </TextBlock>
                                </ToolTip>
                                <ToolTip x:Key="pishockAPIKeyTooltip" DataContext="{Binding Path=PlacementTarget, RelativeSource={x:Static RelativeSource.Self}}">
                                    <TextBlock>
                                        Your API Key for the PiShock API, required to make requests to your PiShock device.
                                    </TextBlock>
                                </ToolTip>
                                <ToolTip x:Key="pishockSharecodeTooltip" DataContext="{Binding Path=PlacementTarget, RelativeSource={x:Static RelativeSource.Self}}">
                                    <TextBlock>
                                        Your share code for the PiShock API, required to make requests to your PiShock device.
                                    </TextBlock>
                                </ToolTip>
                            </Grid.Resources>
                            <!-- Warning -->
                            <TextBlock Grid.Row="0" Grid.Column="0" Margin="5,0,10,0" FontSize="9" Visibility="{Binding PiShockSettings.PiShockEnabled, Converter={StaticResource boolToVisibilityConverter}}">
                                <Italic>
                                    You shouldn't show/share these with anyone!
                                </Italic>
                            </TextBlock>
                            <!-- Username -->
                            <TextBlock Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="2" Margin="5,2,10,2" ToolTip="{StaticResource pishockUsernameTooltip}" Text="PiShock Username:" />
                            <TextBox Grid.Row="2" Grid.Column="0" Grid.ColumnSpan="2" ToolTip="{StaticResource pishockUsernameTooltip}" IsEnabled="{Binding RavensSettings.AreRavenModSettingsLoaded}" Text="{Binding PiShockSettings.Username, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                            <!-- API Key -->
                            <TextBlock Grid.Row="3" Grid.Column="0" Grid.ColumnSpan="2" Margin="5,2,10,2" ToolTip="{StaticResource pishockAPIKeyTooltip}" Text="PiShock API Key:" />
                            <TextBox Grid.Row="4" Grid.Column="0" Grid.ColumnSpan="2" ToolTip="{StaticResource pishockAPIKeyTooltip}" IsEnabled="{Binding RavensSettings.AreRavenModSettingsLoaded}" Text="{Binding PiShockSettings.APIKey, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                            <!-- Share Code -->
                            <TextBlock Grid.Row="5" Grid.Column="0" Grid.ColumnSpan="2" Margin="5,2,10,2" ToolTip="{StaticResource pishockSharecodeTooltip}" Text="PiShock Share Code:" />
                            <TextBox Grid.Row="6" Grid.Column="0" Grid.ColumnSpan="2" ToolTip="{StaticResource pishockSharecodeTooltip}" IsEnabled="{Binding RavensSettings.AreRavenModSettingsLoaded}" Text="{Binding PiShockSettings.ShareCode, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                        </Grid>
                    </TabItem>
                    <TabItem x:Name="tabItemRavens" Header="Ravens">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" SharedSizeGroup="FirstColumn"/>
                                <ColumnDefinition Width="*" SharedSizeGroup="SecondColumn"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <!-- Enabled -->
                                <RowDefinition Height="Auto"/>
                                <!-- Seperator -->
                                <RowDefinition Height="Auto"/>
                                <!-- Debug Toggle -->
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <!-- Debug Clear -->
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <!-- Sub Mode Toggle -->
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <!-- Max Count -->
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <!-- Time Alive -->
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <!-- Trigger Type -->
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <!-- Trigger Settings Row 1 -->
                                <RowDefinition Height="Auto"/>
                                <!-- Trigger Settings Row 2 -->
                                <RowDefinition Height="Auto"/>
                                <!-- Trigger Settings Row 3 -->
                                <RowDefinition Height="Auto"/>
                                <!-- Gun Seperator -->
                                <RowDefinition Height="Auto"/>
                                <!-- Gun Enabled-->
                                <RowDefinition Height="Auto"/>
                                <!-- Gun Toggle -->
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <Grid.Resources>
                                <ObjectDataProvider x:Key="twitchRavenTriggerTypeEnumValues" MethodName="GetValues" ObjectType="{x:Type System:Enum}">
                                    <ObjectDataProvider.MethodParameters>
                                        <x:Type TypeName="ravenSettings:TwitchRavenTriggerTypes"/>
                                    </ObjectDataProvider.MethodParameters>
                                </ObjectDataProvider>
                                <ObjectDataProvider x:Key="youTubeRavenTriggerTypeEnumValues" MethodName="GetValues" ObjectType="{x:Type System:Enum}">
                                    <ObjectDataProvider.MethodParameters>
                                        <x:Type TypeName="ravenSettings:YouTubeRavenTriggerTypes"/>
                                    </ObjectDataProvider.MethodParameters>
                                </ObjectDataProvider>
                                <ToolTip x:Key="enabledRavenTooltip" DataContext="{Binding Path=PlacementTarget, RelativeSource={x:Static RelativeSource.Self}}">
                                    <TextBlock>
                                        If enabled, the mod will spawn ravens based on specific triggers
                                    </TextBlock>
                                </ToolTip>
                                <ToolTip x:Key="twitchRavenTriggerTooltip" DataContext="{Binding Path=PlacementTarget, RelativeSource={x:Static RelativeSource.Self}}">
                                    <TextBlock>
                                        The trigger for spawning the ravens via Twitch
                                        <LineBreak/>
                                        <Bold>ChatMessage:</Bold> Whenever a Message is typed in the Twitch Chat
                                        <LineBreak/>
                                        <Bold>ChannelPointReward:</Bold> Whenever a specified Channel Point Reward is redeemed
                                        <LineBreak/>
                                        <Bold>Insult:</Bold> Whenever you fall off screen
                                    </TextBlock>
                                </ToolTip>
                                <ToolTip x:Key="youTubeRavenTriggerTooltip" DataContext="{Binding Path=PlacementTarget, RelativeSource={x:Static RelativeSource.Self}}">
                                    <TextBlock>
                                        The trigger for spawning the ravens via YouTube
                                        <LineBreak/>
                                        <Bold>ChatMessage:</Bold> Whenever a Message is typed in the YouTube Chat
                                    </TextBlock>
                                </ToolTip>
                                <ToolTip x:Key="ravenDebugToggleKeyTooltip" DataContext="{Binding Path=PlacementTarget, RelativeSource={x:Static RelativeSource.Self}}">
                                    <TextBlock>
                                        Provides a key you can press to toggle the Ravens spawning during the game's run.
                                        Useful in the event of a hate raid or if it's getting a bit much.
                                    </TextBlock>
                                </ToolTip>
                                <ToolTip x:Key="ravenDebugClearKeyTooltip" DataContext="{Binding Path=PlacementTarget, RelativeSource={x:Static RelativeSource.Self}}">
                                    <TextBlock>
                                        Provides a key you can press to clear all Ravens currently on the screen.
                                        Useful in case someone says something inappropriate.
                                    </TextBlock>
                                </ToolTip>
                                <ToolTip x:Key="ravenSubToggleKeyTooltip" DataContext="{Binding Path=PlacementTarget, RelativeSource={x:Static RelativeSource.Self}}">
                                    <TextBlock>
                                        Provides a key you can press to toggle Sub Mode for the Stream Messages.
                                        Useful if you want to gate interaction behind subs in the event of a 
                                        raid or similar.
                                    </TextBlock>
                                </ToolTip>
                                <ToolTip x:Key="ravenTimeAlivetooltip" DataContext="{Binding Path=PlacementTarget, RelativeSource={x:Static RelativeSource.Self}}">
                                    <TextBlock>
                                        The time a raven should stay on the floor after landing in seconds.
                                        This is how long it will hang around displaying the message for.
                                    </TextBlock>
                                </ToolTip>
                                <ToolTip x:Key="gunEnabledTooltip" DataContext="{Binding Path=PlacementTarget, RelativeSource={x:Static RelativeSource.Self}}">
                                    <TextBlock>
                                        If Enabled, you will be able to enter a "Gun Mode" and shoot down the 
                                        Ravens during the game using your mouse.
                                    </TextBlock>
                                </ToolTip>
                                <ToolTip x:Key="gunKeyTooltip" DataContext="{Binding Path=PlacementTarget, RelativeSource={x:Static RelativeSource.Self}}">
                                    <TextBlock>
                                        Provides a key you can press to enter or exit the "Gun Mode".
                                    </TextBlock>
                                </ToolTip>
                            </Grid.Resources>
                            <!-- Raven Enabled -->
                            <TextBlock Grid.Row="0" Grid.Column="0" Margin="5,2,10,2" Text="Enabled: " />
                            <CheckBox Grid.Row="0" Grid.Column="1" Margin="5,2,10,2" HorizontalAlignment="Right" IsChecked="{Binding RavensSettings.RavenEnabled, Mode=TwoWay}" IsEnabled="{Binding RavensSettings.AreRavenModSettingsLoaded}"/>
                            <!-- Separator -->
                            <Separator Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="2" Visibility="{Binding RavensSettings.RavenEnabled, Converter={StaticResource boolToVisibilityConverter}}"/>
                            <!-- Toggle Active Key -->
                            <TextBlock Grid.Row="2" Grid.Column="0" Grid.ColumnSpan="2" Margin="5,2,10,2" ToolTip="{StaticResource ravenDebugToggleKeyTooltip}" Visibility="{Binding RavensSettings.RavenEnabled, Converter={StaticResource boolToVisibilityConverter}}" Text="Toggle Raven Spawning Key:" />
                            <ComboBox Grid.Row="3" Grid.Column="0" Grid.ColumnSpan="2" ToolTip="{StaticResource ravenDebugToggleKeyTooltip}" IsEnabled="{Binding RavensSettings.AreRavenModSettingsLoaded}" Visibility="{Binding RavensSettings.RavenEnabled, Converter={StaticResource boolToVisibilityConverter}}" ItemsSource="{Binding Source={StaticResource keysEnumValues}}" SelectedItem="{Binding RavensSettings.RavenToggleDebugKey, Mode=TwoWay}"/>
                            <!-- Clear Key -->
                            <TextBlock Grid.Row="4" Grid.Column="0" Grid.ColumnSpan="2" Margin="5,2,10,2" ToolTip="{StaticResource ravenDebugClearKeyTooltip}" Visibility="{Binding RavensSettings.RavenEnabled, Converter={StaticResource boolToVisibilityConverter}}" Text="Clear Key:" />
                            <ComboBox Grid.Row="5" Grid.Column="0" Grid.ColumnSpan="2" ToolTip="{StaticResource ravenDebugClearKeyTooltip}" IsEnabled="{Binding RavensSettings.AreRavenModSettingsLoaded}" Visibility="{Binding RavensSettings.RavenEnabled, Converter={StaticResource boolToVisibilityConverter}}" ItemsSource="{Binding Source={StaticResource keysEnumValues}}" SelectedItem="{Binding RavensSettings.RavenClearDebugKey, Mode=TwoWay}"/>
                            <!-- Toggle Sub Mode Key -->
                            <TextBlock Grid.Row="6" Grid.Column="0" Grid.ColumnSpan="2" Margin="5,2,10,2" ToolTip="{StaticResource ravenSubToggleKeyTooltip}" Visibility="{Binding RavensSettings.RavenEnabled, Converter={StaticResource boolToVisibilityConverter}}" Text="Toggle Sub Mode Key:" />
                            <ComboBox Grid.Row="7" Grid.Column="0" Grid.ColumnSpan="2" ToolTip="{StaticResource ravenSubToggleKeyTooltip}" IsEnabled="{Binding RavensSettings.AreRavenModSettingsLoaded}" Visibility="{Binding RavensSettings.RavenEnabled, Converter={StaticResource boolToVisibilityConverter}}" ItemsSource="{Binding Source={StaticResource keysEnumValues}}" SelectedItem="{Binding RavensSettings.RavenSubModeToggleKey, Mode=TwoWay}"/>
                            <!-- Max Number of Ravens-->
                            <TextBlock Grid.Row="8" Grid.Column="0" Grid.ColumnSpan="2" Margin="5,2,10,2" Visibility="{Binding RavensSettings.RavenEnabled, Converter={StaticResource boolToVisibilityConverter}}" Text="Max Number of Ravens:" />
                            <TextBox Grid.Row="9" Grid.Column="0" Grid.ColumnSpan="2" Visibility="{Binding RavensSettings.RavenEnabled, Converter={StaticResource boolToVisibilityConverter}}" Text="{Binding RavensSettings.MaxRavensCount, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                            <!-- Ravens Time On Screen-->
                            <TextBlock Grid.Row="10" Grid.Column="0" Grid.ColumnSpan="2" Margin="5,2,10,2" ToolTip="{StaticResource ravenTimeAlivetooltip}" Visibility="{Binding RavensSettings.RavenEnabled, Converter={StaticResource boolToVisibilityConverter}}" Text="Message Duration (seconds):" />
                            <TextBox Grid.Row="11" Grid.Column="0" Grid.ColumnSpan="2" ToolTip="{StaticResource ravenTimeAlivetooltip}" Visibility="{Binding RavensSettings.RavenEnabled, Converter={StaticResource boolToVisibilityConverter}}" Text="{Binding RavensSettings.MessageDurationInSeconds, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                            <!-- Raven Trigger -->
                            <!-- Twitch -->
                            <TextBlock Grid.Row="12" Grid.Column="0" Grid.ColumnSpan="2" Margin="5,2,10,2" ToolTip="{StaticResource twitchRavenTriggerTooltip}" Text="Trigger Type:">
                                <TextBlock.Style>
                                    <Style TargetType="{x:Type TextBlock}">
                                        <Setter Property="Visibility" Value="Collapsed"/>
                                        <Style.Triggers>
                                            <MultiDataTrigger>
                                                <MultiDataTrigger.Conditions>
                                                    <Condition Binding="{Binding RavensSettings.RavenEnabled}" Value="True"/>
                                                    <Condition Binding="{Binding StreamingSettings.IsStreamingOnTwitch}" Value="True"/>
                                                </MultiDataTrigger.Conditions>
                                                <MultiDataTrigger.Setters>
                                                    <Setter Property="Visibility" Value="Visible"/>
                                                </MultiDataTrigger.Setters>
                                            </MultiDataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBlock.Style>
                            </TextBlock>
                            <ComboBox Grid.Row="13" Grid.Column="0" Grid.ColumnSpan="2" ToolTip="{StaticResource twitchRavenTriggerTooltip}" IsEnabled="{Binding RavensSettings.AreRavenModSettingsLoaded}" ItemsSource="{Binding Source={StaticResource twitchRavenTriggerTypeEnumValues}}" SelectedItem="{Binding RavensSettings.RavenTriggerType, Mode=TwoWay}">
                                <ComboBox.Style>
                                    <Style TargetType="{x:Type ComboBox}">
                                        <Setter Property="Visibility" Value="Collapsed"/>
                                        <Style.Triggers>
                                            <MultiDataTrigger>
                                                <MultiDataTrigger.Conditions>
                                                    <Condition Binding="{Binding RavensSettings.RavenEnabled}" Value="True"/>
                                                    <Condition Binding="{Binding StreamingSettings.IsStreamingOnTwitch}" Value="True"/>
                                                </MultiDataTrigger.Conditions>
                                                <MultiDataTrigger.Setters>
                                                    <Setter Property="Visibility" Value="Visible"/>
                                                </MultiDataTrigger.Setters>
                                            </MultiDataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </ComboBox.Style>
                            </ComboBox>
                            <!-- YouTube -->
                            <TextBlock Grid.Row="12" Grid.Column="0" Grid.ColumnSpan="2" Margin="5,2,10,2" ToolTip="{StaticResource youTubeRavenTriggerTooltip}" Text="Trigger Type:">
                                <TextBlock.Style>
                                    <Style TargetType="{x:Type TextBlock}">
                                        <Setter Property="Visibility" Value="Collapsed"/>
                                        <Style.Triggers>
                                            <MultiDataTrigger>
                                                <MultiDataTrigger.Conditions>
                                                    <Condition Binding="{Binding RavensSettings.RavenEnabled}" Value="True"/>
                                                    <Condition Binding="{Binding StreamingSettings.IsStreamingOnYouTube}" Value="True"/>
                                                </MultiDataTrigger.Conditions>
                                                <MultiDataTrigger.Setters>
                                                    <Setter Property="Visibility" Value="Visible"/>
                                                </MultiDataTrigger.Setters>
                                            </MultiDataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBlock.Style>
                            </TextBlock>
                            <ComboBox Grid.Row="13" Grid.Column="0" Grid.ColumnSpan="2" ToolTip="{StaticResource youTubeRavenTriggerTooltip}" IsEnabled="{Binding RavensSettings.AreRavenModSettingsLoaded}" ItemsSource="{Binding Source={StaticResource youTubeRavenTriggerTypeEnumValues}}" SelectedItem="{Binding RavensSettings.YouTubeRavenTriggerType, Mode=TwoWay}">
                                <ComboBox.Style>
                                    <Style TargetType="{x:Type ComboBox}">
                                        <Setter Property="Visibility" Value="Collapsed"/>
                                        <Style.Triggers>
                                            <MultiDataTrigger>
                                                <MultiDataTrigger.Conditions>
                                                    <Condition Binding="{Binding RavensSettings.RavenEnabled}" Value="True"/>
                                                    <Condition Binding="{Binding StreamingSettings.IsStreamingOnYouTube}" Value="True"/>
                                                </MultiDataTrigger.Conditions>
                                                <MultiDataTrigger.Setters>
                                                    <Setter Property="Visibility" Value="Visible"/>
                                                </MultiDataTrigger.Setters>
                                            </MultiDataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </ComboBox.Style>
                            </ComboBox>
                            <!-- Trigger Settings: Channel Point -->
                            <Grid x:Name="grdChatPointSettings" Grid.Row="14" Grid.Column="0" Grid.ColumnSpan="2">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition SharedSizeGroup="FirstColumn"/>
                                    <ColumnDefinition SharedSizeGroup="SharedColumn"/>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                </Grid.RowDefinitions>
                                <Grid.Style>
                                    <Style TargetType="{x:Type Grid}">
                                        <Setter Property="Visibility" Value="Collapsed"/>
                                        <Style.Triggers>
                                            <MultiDataTrigger>
                                                <MultiDataTrigger.Conditions>
                                                    <Condition Binding="{Binding RavensSettings.RavenTriggerType}" Value="ChannelPointReward"/>
                                                    <Condition Binding="{Binding StreamingSettings.IsStreamingOnTwitch}" Value="True"/>
                                                </MultiDataTrigger.Conditions>
                                                <MultiDataTrigger.Setters>
                                                    <Setter Property="Visibility" Value="Visible"/>
                                                </MultiDataTrigger.Setters>
                                            </MultiDataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </Grid.Style>
                                <Separator Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="2" Margin="5,10,10,5" Visibility="{Binding RavensSettings.RavenEnabled, Converter={StaticResource boolToVisibilityConverter}}" />
                                <TextBlock Grid.Row="1" Grid.Column="0" Margin="5,2,10,2" Visibility="{Binding RavensSettings.RavenEnabled, Converter={StaticResource boolToVisibilityConverter}}" Text="Channel Point Reward ID:" />
                                <TextBlock Grid.Row="2" Grid.Column="0" Margin="5,2,10,2" Grid.ColumnSpan="2" FontSize="9" TextWrapping="Wrap" Visibility="{Binding RavensSettings.RavenEnabled, Converter={StaticResource boolToVisibilityConverter}}">
                                    <Italic>
                                        If you're not sure how to get this, 
                                        <Hyperlink NavigateUri="https://www.instafluff.tv/TwitchCustomRewardID/?channel=YOURNAME" RequestNavigate="Hyperlink_RequestNavigate">
                                            click here 
                                        </Hyperlink>
                                        replace the 'YOURNAME' in the URL with your twitch username
                                        and then redeem the reward in your chat.
                                    </Italic>
                                </TextBlock>
                                <TextBox Grid.Row="3" Grid.Column="0" Grid.ColumnSpan="2" Margin="5,2,5,2" IsEnabled="{Binding RavensSettings.AreRavenModSettingsLoaded}" Visibility="{Binding RavensSettings.RavenEnabled, Converter={StaticResource boolToVisibilityConverter}}" Text="{Binding RavensSettings.RavensChannelPointID, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                            </Grid>
                            <!-- Trigger Settings: Excluded Term Filter -->
                            <Grid x:Name="grdExcludedWords" Grid.Row="15" Grid.Column="0" Grid.ColumnSpan="2">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                </Grid.RowDefinitions>
                                <Grid.Style>
                                    <Style TargetType="{x:Type Grid}">
                                        <Setter Property="Visibility" Value="Collapsed"/>
                                        <Style.Triggers>
                                            <MultiDataTrigger>
                                                <MultiDataTrigger.Conditions>
                                                    <Condition Binding="{Binding StreamingSettings.IsStreamingOnTwitch}" Value="True"/>
                                                    <Condition Binding="{Binding RavensSettings.RavenTriggerType}" Value="ChatMessage"/>
                                                </MultiDataTrigger.Conditions>
                                                <MultiDataTrigger.Setters>
                                                    <Setter Property="Visibility" Value="Visible"/>
                                                </MultiDataTrigger.Setters>
                                            </MultiDataTrigger>
                                            <MultiDataTrigger>
                                                <MultiDataTrigger.Conditions>
                                                    <Condition Binding="{Binding StreamingSettings.IsStreamingOnTwitch}" Value="True"/>
                                                    <Condition Binding="{Binding RavensSettings.RavenTriggerType}" Value="ChannelPointReward"/>
                                                </MultiDataTrigger.Conditions>
                                                <MultiDataTrigger.Setters>
                                                    <Setter Property="Visibility" Value="Visible"/>
                                                </MultiDataTrigger.Setters>
                                            </MultiDataTrigger>
                                            <MultiDataTrigger>
                                                <MultiDataTrigger.Conditions>
                                                    <Condition Binding="{Binding StreamingSettings.IsStreamingOnYouTube}" Value="True"/>
                                                    <Condition Binding="{Binding RavensSettings.YouTubeRavenTriggerType}" Value="ChatMessage"/>
                                                </MultiDataTrigger.Conditions>
                                                <MultiDataTrigger.Setters>
                                                    <Setter Property="Visibility" Value="Visible"/>
                                                </MultiDataTrigger.Setters>
                                            </MultiDataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </Grid.Style>
                                <Separator Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="3" Margin="5,10,10,5" Visibility="{Binding RavensSettings.RavenEnabled, Converter={StaticResource boolToVisibilityConverter}}" />
                                <TextBlock Grid.Row="1" Grid.Column="0" Margin="5,2,10,2" Visibility="{Binding RavensSettings.RavenEnabled, Converter={StaticResource boolToVisibilityConverter}}" Text="Excluded Terms:" />
                                <TextBox Grid.Row="2" Grid.Column="0" Margin="5,2,5,2" Visibility="{Binding RavensSettings.RavenEnabled, Converter={StaticResource boolToVisibilityConverter}}" 
                                            Text="{Binding RavensSettings.CandidateExcludedItem, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                                <Button Grid.Row="2" Grid.Column="1" Content="+" Padding="5,0,5,0" Margin="0,2,5,2" Visibility="{Binding RavensSettings.RavenEnabled, Converter={StaticResource boolToVisibilityConverter}}"
                                        Command="{Binding RavensSettings.AddExcludedTermCommand}"/>
                                <Button Grid.Row="2" Grid.Column="2" Content="-" Padding="6,0,6,0" Margin="0,2,5,2" Visibility="{Binding RavensSettings.RavenEnabled, Converter={StaticResource boolToVisibilityConverter}}"
                                        Command="{Binding RavensSettings.RemoveExcludedTermCommand}"/>
                                <ListBox Grid.Row="3" Grid.Column="0" Grid.ColumnSpan="3" Margin="5,2,5,2" MinHeight="50" MaxHeight="300" Visibility="{Binding RavensSettings.RavenEnabled, Converter={StaticResource boolToVisibilityConverter}}" 
                                            ItemsSource="{Binding RavensSettings.ExcludedTerms, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                            SelectedIndex="{Binding RavensSettings.SelectedExcludedItemIndex, Mode=TwoWay}"/>
                            </Grid>
                            <!-- Trigger Settings: Insult List -->
                            <Grid x:Name="grdRavenInsults" Grid.Row="16" Grid.Column="0" Grid.ColumnSpan="2">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                </Grid.RowDefinitions>
                                <Grid.Style>
                                    <Style TargetType="{x:Type Grid}">
                                        <Setter Property="Visibility" Value="Collapsed"/>
                                        <Style.Triggers>
                                            <MultiDataTrigger>
                                                <MultiDataTrigger.Conditions>
                                                    <Condition Binding="{Binding RavensSettings.RavenTriggerType}" Value="Insult"/>
                                                    <Condition Binding="{Binding StreamingSettings.IsStreamingOnTwitch}" Value="True"/>
                                                </MultiDataTrigger.Conditions>
                                                <MultiDataTrigger.Setters>
                                                    <Setter Property="Visibility" Value="Visible"/>
                                                </MultiDataTrigger.Setters>
                                            </MultiDataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </Grid.Style>
                                <Separator Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="3" Margin="5,10,10,5" Visibility="{Binding RavensSettings.RavenEnabled, Converter={StaticResource boolToVisibilityConverter}}" />

                                <!-- Number of Insult Ravens -->
                                <TextBlock Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="3" Margin="5,2,10,2" Visibility="{Binding RavensSettings.RavenEnabled, Converter={StaticResource boolToVisibilityConverter}}" Text="Insult Raven Spawn Count:"/>
                                <TextBox Grid.Row="2" Grid.Column="0" Grid.ColumnSpan="3" Margin="5,2,5,2" Visibility="{Binding RavensSettings.RavenEnabled, Converter={StaticResource boolToVisibilityConverter}}" Text="{Binding RavensSettings.InsultRavenSpawnCount, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>

                                <!-- Insult List Box -->
                                <TextBlock Grid.Row="3" Grid.Column="0" Margin="5,2,10,2" Visibility="{Binding RavensSettings.RavenEnabled, Converter={StaticResource boolToVisibilityConverter}}" Text="Raven Insults:" />
                                <TextBox Grid.Row="4" Grid.Column="0" Margin="5,2,5,2" Visibility="{Binding RavensSettings.RavenEnabled, Converter={StaticResource boolToVisibilityConverter}}" 
                                            Text="{Binding RavensSettings.CandidateRavenInsult, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                                <Button Grid.Row="4" Grid.Column="1" Content="+" Padding="5,0,5,0" Margin="0,2,5,2" Visibility="{Binding RavensSettings.RavenEnabled, Converter={StaticResource boolToVisibilityConverter}}"
                                        Command="{Binding RavensSettings.AddRavenInsultCommand}"/>
                                <Button Grid.Row="4" Grid.Column="2" Content="-" Padding="6,0,6,0" Margin="0,2,5,2" Visibility="{Binding RavensSettings.RavenEnabled, Converter={StaticResource boolToVisibilityConverter}}"
                                        Command="{Binding RavensSettings.RemoveRavenInsultCommand}"/>
                                <ListBox Grid.Row="5" Grid.Column="0" Grid.ColumnSpan="3" Margin="5,2,5,2" MinHeight="50" MaxHeight="300" Visibility="{Binding RavensSettings.RavenEnabled, Converter={StaticResource boolToVisibilityConverter}}" 
                                            ItemsSource="{Binding RavensSettings.RavenInsults, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                            SelectedIndex="{Binding RavensSettings.SelectedRavenInsultIndex, Mode=TwoWay}"/>
                            </Grid>
                            <!-- Gun Seperator -->
                            <Separator Grid.Row="17" Grid.Column="0" Grid.ColumnSpan="2" Margin="0,10,0,5" Visibility="{Binding RavensSettings.RavenEnabled, Converter={StaticResource boolToVisibilityConverter}}"/>
                            <!-- Gun Enabled -->
                            <TextBlock Grid.Row="18" Grid.Column="0" Margin="5,2,10,2" ToolTip="{StaticResource gunEnabledTooltip}" Visibility="{Binding RavensSettings.RavenEnabled, Converter={StaticResource boolToVisibilityConverter}}" Text="Gun Mode Enabled: " />
                            <CheckBox Grid.Row="18" Grid.Column="1" Margin="5,2,10,2" ToolTip="{StaticResource gunEnabledTooltip}" Visibility="{Binding RavensSettings.RavenEnabled, Converter={StaticResource boolToVisibilityConverter}}" HorizontalAlignment="Right" IsChecked="{Binding RavensSettings.GunEnabled, Mode=TwoWay}" IsEnabled="{Binding RavensSettings.AreRavenModSettingsLoaded}"/>
                            <!-- Gun Toggle Key -->
                            <TextBlock Grid.Row="19" Grid.Column="0" Grid.ColumnSpan="2" Margin="5,2,10,2" ToolTip="{StaticResource gunKeyTooltip}" Visibility="{Binding RavensSettings.GunSettingsVisible, Converter={StaticResource boolToVisibilityConverter}}" Text="Toggle Gun Key:" />
                            <ComboBox Grid.Row="20" Grid.Column="0" Grid.ColumnSpan="2" ToolTip="{StaticResource gunKeyTooltip}" Visibility="{Binding RavensSettings.GunSettingsVisible, Converter={StaticResource boolToVisibilityConverter}}" ItemsSource="{Binding Source={StaticResource keysEnumValues}}" SelectedItem="{Binding RavensSettings.GunToggleKey, Mode=TwoWay}"/>
                        </Grid>
                    </TabItem>
                    <TabItem x:Name="tabItemPunishment" Header="Punishment" Visibility="{Binding FeedbackDeviceSettings.IsUsingAnyDevice, Converter={StaticResource boolToVisibilityConverter}}" >
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" SharedSizeGroup="FirstColumn"/>
                                <ColumnDefinition Width="*" SharedSizeGroup="SecondColumn"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <!-- Enabled -->
                                <RowDefinition Height="Auto"/>
                                <!-- Seperator -->
                                <RowDefinition Height="Auto"/>
                                <!-- Toggle Key -->
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <!-- Test Beep Key -->
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <!-- Display Feedback Strength -->
                                <RowDefinition Height="Auto"/>
                                <!-- Round Durations -->
                                <RowDefinition Height="Auto"/>
                                <!-- Punishment Enabled -->
                                <RowDefinition Height="Auto"/>
                                <!-- Min Shock Duration -->
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <!-- Min Shock Intensity -->
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <!-- Max Shock Duration -->
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <!-- Max Shock Intensity -->
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <!-- Min Fall Distance -->
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <!-- Max Fall Distance -->
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <!-- Punishment Easy Mode -->
                                <RowDefinition Height="Auto"/>
                                <!-- Rewards Enabled -->
                                <RowDefinition Height="Auto"/>
                                <!-- Min Reward Duration -->
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <!-- Min Reward Intensity -->
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <!-- Max Reward Duration -->
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <!-- Max Reward Intensity -->
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <!-- Min Progress Distance -->
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <!-- Max Progress Distance -->
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <!-- Reward Progress Only -->
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <Grid.Resources>
                                <ToolTip x:Key="punishmentEnabledTooltip" DataContext="{Binding Path=PlacementTarget, RelativeSource={x:Static RelativeSource.Self}}">
                                    <TextBlock>
                                        If enabled, you will recieve punishments/rewards during gameplay.
                                    </TextBlock>
                                </ToolTip>
                                <ToolTip x:Key="punishmentToggleKeyTooltip" DataContext="{Binding Path=PlacementTarget, RelativeSource={x:Static RelativeSource.Self}}">
                                    <TextBlock>
                                        A key you can press during gameplay to enable/disable the Punishment functionality on the fly.
                                    </TextBlock>
                                </ToolTip>
                                <ToolTip x:Key="punishmentTestFeedbackKeyTooltip" DataContext="{Binding Path=PlacementTarget, RelativeSource={x:Static RelativeSource.Self}}">
                                    <TextBlock>
                                        A key you can press during gameplay to send a test feedback event to your punishment device to ensure everything is working.
                                    </TextBlock>
                                </ToolTip>
                                <ToolTip x:Key="punishmentDisplayFeedbackStrengthTooltip" DataContext="{Binding Path=PlacementTarget, RelativeSource={x:Static RelativeSource.Self}}">
                                    <TextBlock>
                                        Whether the triggered strength/duration for a rewards and punishments will be displayed along with the reward/punishment message.
                                    </TextBlock>
                                </ToolTip>
                                <ToolTip x:Key="punishmentRoundDurationTooltip" DataContext="{Binding Path=PlacementTarget, RelativeSource={x:Static RelativeSource.Self}}">
                                    <TextBlock>
                                        When calculating punishments durations will be rounded to the nearest second during calculation.
                                        This means durations only calculate/display on screen (if enabled) to the nearest second- but some APIs (the PiShock) only support this anyways.
                                    </TextBlock>
                                </ToolTip>
                                <ToolTip x:Key="punishmentPunishmentEnabledTooltip" DataContext="{Binding Path=PlacementTarget, RelativeSource={x:Static RelativeSource.Self}}">
                                    <TextBlock>
                                        Whether or not punishments will be sent for falling.
                                    </TextBlock>
                                </ToolTip>
                                <ToolTip x:Key="punishmentMinPunishmentDurationTooltip" DataContext="{Binding Path=PlacementTarget, RelativeSource={x:Static RelativeSource.Self}}">
                                    <TextBlock>
                                        The minimum duration for a punishment.
                                        Note: Some devices may have limits on durations.
                                    </TextBlock>
                                </ToolTip>
                                <ToolTip x:Key="punishmentMinPunishmentIntensityTooltip" DataContext="{Binding Path=PlacementTarget, RelativeSource={x:Static RelativeSource.Self}}">
                                    <TextBlock>
                                        The minimum intensity (0-100) for a punishment.
                                    </TextBlock>
                                </ToolTip>
                                <ToolTip x:Key="punishmentMaxPunishmentDurationTooltip" DataContext="{Binding Path=PlacementTarget, RelativeSource={x:Static RelativeSource.Self}}">
                                    <TextBlock>
                                        The maximum duration for a punishment.
                                        Note: Some devices may have limits on durations.
                                    </TextBlock>
                                </ToolTip>
                                <ToolTip x:Key="punishmentMaxPunishmentIntensityTooltip" DataContext="{Binding Path=PlacementTarget, RelativeSource={x:Static RelativeSource.Self}}">
                                    <TextBlock>
                                        The maximum intensity (0-100) for a punishment.
                                    </TextBlock>
                                </ToolTip>
                                <ToolTip x:Key="punishmentMinFallTooltip" DataContext="{Binding Path=PlacementTarget, RelativeSource={x:Static RelativeSource.Self}}">
                                    <TextBlock>
                                        The minimum distance you must fall to receive a punishment.
                                    </TextBlock>
                                </ToolTip>
                                <ToolTip x:Key="punishmentMaxFallTooltip" DataContext="{Binding Path=PlacementTarget, RelativeSource={x:Static RelativeSource.Self}}">
                                    <TextBlock>
                                        The distance you must fall before you will receive the maximum punishment.
                                        Note: One screen should be 360 pixels.
                                    </TextBlock>
                                </ToolTip>
                                <ToolTip x:Key="punishmentPunishmentEasyModeTooltip" DataContext="{Binding Path=PlacementTarget, RelativeSource={x:Static RelativeSource.Self}}">
                                    <TextBlock>
                                        If enabled you should recieve easier punishments (e.g. nicer forms of feedback, reduced feedback, etc).
                                    </TextBlock>
                                </ToolTip>
                                <ToolTip x:Key="punishmentRewardsEnabledTooltip" DataContext="{Binding Path=PlacementTarget, RelativeSource={x:Static RelativeSource.Self}}">
                                    <TextBlock>
                                        Whether or not rewards will be sent for progress.
                                    </TextBlock>
                                </ToolTip>
                                <ToolTip x:Key="punishmentMinRewardDurationTooltip" DataContext="{Binding Path=PlacementTarget, RelativeSource={x:Static RelativeSource.Self}}">
                                    <TextBlock>
                                        The minimum duration for a reward.
                                        Note: Some devices may have limits on durations.
                                    </TextBlock>
                                </ToolTip>
                                <ToolTip x:Key="punishmentMinRewardIntensityTooltip" DataContext="{Binding Path=PlacementTarget, RelativeSource={x:Static RelativeSource.Self}}">
                                    <TextBlock>
                                        The minimum intensity (0-100) for a reward.
                                    </TextBlock>
                                </ToolTip>
                                <ToolTip x:Key="punishmentMaxRewardDurationTooltip" DataContext="{Binding Path=PlacementTarget, RelativeSource={x:Static RelativeSource.Self}}">
                                    <TextBlock>
                                        The maximum duration for a reward.
                                        Note: Some devices may have limits on durations.
                                    </TextBlock>
                                </ToolTip>
                                <ToolTip x:Key="punishmentMaxRewardIntensityTooltip" DataContext="{Binding Path=PlacementTarget, RelativeSource={x:Static RelativeSource.Self}}">
                                    <TextBlock>
                                        The maximum intensity (0-100) for a reward.
                                    </TextBlock>
                                </ToolTip>
                                <ToolTip x:Key="punishmentMinProgressTooltip" DataContext="{Binding Path=PlacementTarget, RelativeSource={x:Static RelativeSource.Self}}">
                                    <TextBlock>
                                        The minimum distance you must progress to receive a reward.
                                    </TextBlock>
                                </ToolTip>
                                <ToolTip x:Key="punishmentMaxProgressTooltip" DataContext="{Binding Path=PlacementTarget, RelativeSource={x:Static RelativeSource.Self}}">
                                    <TextBlock>
                                        The distance you must progress before you will receive the maximum reward.
                                    </TextBlock>
                                </ToolTip>
                                <ToolTip x:Key="punishmentRewardProgressOnlyTooltip" DataContext="{Binding Path=PlacementTarget, RelativeSource={x:Static RelativeSource.Self}}">
                                    <TextBlock>
                                        If enabled you will only receive rewards the first time you make progress (note this does not save between sessions).
                                        Falling and getting back to an area will not give you a reward if enabled.
                                    </TextBlock>
                                </ToolTip>
                            </Grid.Resources>
                            <!-- Enabled -->
                            <TextBlock Grid.Row="0" Grid.Column="0" Margin="5,2,10,2" ToolTip="{StaticResource punishmentEnabledTooltip}" Text="Enabled: "  />
                            <CheckBox Grid.Row="0" Grid.Column="1" Margin="5,2,10,2" HorizontalAlignment="Right" ToolTip="{StaticResource punishmentEnabledTooltip}" IsChecked="{Binding PunishmentSettings.PunishmentModEnabled, Mode=TwoWay}" IsEnabled="{Binding PunishmentSettings.ArePunishmentSettingsLoaded}"/>
                            <!-- Seperator -->
                            <Separator Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="2" Visibility="{Binding PunishmentSettings.PunishmentModEnabled, Converter={StaticResource boolToVisibilityConverter}}"/>
                            <!-- Toggle Key -->
                            <TextBlock Grid.Row="2" Grid.Column="0" Grid.ColumnSpan="2" Margin="5,2,10,2" ToolTip="{StaticResource punishmentToggleKeyTooltip}" Visibility="{Binding PunishmentSettings.PunishmentModEnabled, Converter={StaticResource boolToVisibilityConverter}}" Text="Toggle Punishment Key:" />
                            <ComboBox Grid.Row="3" Grid.Column="0" Grid.ColumnSpan="2" ToolTip="{StaticResource punishmentToggleKeyTooltip}" IsEnabled="{Binding PunishmentSettings.ArePunishmentSettingsLoaded}" Visibility="{Binding PunishmentSettings.PunishmentModEnabled, Converter={StaticResource boolToVisibilityConverter}}" ItemsSource="{Binding Source={StaticResource keysEnumValues}}" SelectedItem="{Binding PunishmentSettings.PunishmentToggleDebugKey, Mode=TwoWay}"/>
                            <!-- Test Beep Key -->
                            <TextBlock Grid.Row="4" Grid.Column="0" Grid.ColumnSpan="2" Margin="5,2,10,2" ToolTip="{StaticResource punishmentTestFeedbackKeyTooltip}" Visibility="{Binding PunishmentSettings.PunishmentModEnabled, Converter={StaticResource boolToVisibilityConverter}}" Text="Test Feedback Key:" />
                            <ComboBox Grid.Row="5" Grid.Column="0" Grid.ColumnSpan="2" ToolTip="{StaticResource punishmentTestFeedbackKeyTooltip}" IsEnabled="{Binding PunishmentSettings.ArePunishmentSettingsLoaded}" Visibility="{Binding PunishmentSettings.PunishmentModEnabled, Converter={StaticResource boolToVisibilityConverter}}" ItemsSource="{Binding Source={StaticResource keysEnumValues}}" SelectedItem="{Binding PunishmentSettings.PunishmentTestFeedbackDebugKey, Mode=TwoWay}"/>
                            <!-- Display Feedback Strength -->
                            <TextBlock Grid.Row="6" Grid.Column="0" Margin="5,2,10,2" ToolTip="{StaticResource punishmentDisplayFeedbackStrengthTooltip}" Visibility="{Binding PunishmentSettings.PunishmentModEnabled, Converter={StaticResource boolToVisibilityConverter}}" Text="Display Feedback Strength: "  />
                            <CheckBox Grid.Row="6" Grid.Column="1" Margin="5,2,10,2" HorizontalAlignment="Right" ToolTip="{StaticResource punishmentDisplayFeedbackStrengthTooltip}" Visibility="{Binding PunishmentSettings.PunishmentModEnabled, Converter={StaticResource boolToVisibilityConverter}}" IsChecked="{Binding PunishmentSettings.DisplayFeedbackStrength, Mode=TwoWay}" IsEnabled="{Binding PunishmentSettings.ArePunishmentSettingsLoaded}"/>
                            <!-- Round Durations -->
                            <TextBlock Grid.Row="7" Grid.Column="0" Margin="5,2,10,2" ToolTip="{StaticResource punishmentRoundDurationTooltip}" Visibility="{Binding PunishmentSettings.PunishmentModEnabled, Converter={StaticResource boolToVisibilityConverter}}" Text="Round Durations: "  />
                            <CheckBox Grid.Row="7" Grid.Column="1" Margin="5,2,10,2" HorizontalAlignment="Right" ToolTip="{StaticResource punishmentRoundDurationTooltip}" Visibility="{Binding PunishmentSettings.PunishmentModEnabled, Converter={StaticResource boolToVisibilityConverter}}" IsChecked="{Binding PunishmentSettings.RoundDurations, Mode=TwoWay}" IsEnabled="{Binding PunishmentSettings.ArePunishmentSettingsLoaded}"/>
                            <!-- Punishment Enabled -->
                            <TextBlock Grid.Row="8" Grid.Column="0" Margin="5,2,10,2" ToolTip="{StaticResource punishmentPunishmentEnabledTooltip}" Visibility="{Binding PunishmentSettings.PunishmentModEnabled, Converter={StaticResource boolToVisibilityConverter}}" Text="Punishment Enabled: "  />
                            <CheckBox Grid.Row="8" Grid.Column="1" Margin="5,2,10,2" HorizontalAlignment="Right" ToolTip="{StaticResource punishmentPunishmentEnabledTooltip}" Visibility="{Binding PunishmentSettings.PunishmentModEnabled, Converter={StaticResource boolToVisibilityConverter}}" IsChecked="{Binding PunishmentSettings.EnabledPunishment, Mode=TwoWay}" IsEnabled="{Binding PunishmentSettings.ArePunishmentSettingsLoaded}"/>
                            <!-- Min Shock Duration -->
                            <TextBlock Grid.Row="9" Grid.Column="0" Grid.ColumnSpan="2" Margin="5,2,10,2" Visibility="{Binding PunishmentSettings.PunishmentModEnabled, Converter={StaticResource boolToVisibilityConverter}}" ToolTip="{StaticResource punishmentMinPunishmentDurationTooltip}" Text="Minimum Punishment Duration:" />
                            <TextBox Grid.Row="10" Grid.Column="0" Grid.ColumnSpan="2" Visibility="{Binding PunishmentSettings.PunishmentModEnabled, Converter={StaticResource boolToVisibilityConverter}}" ToolTip="{StaticResource punishmentMinPunishmentDurationTooltip}" Text="{Binding PunishmentSettings.MinPunishmentDuration, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                            <!-- Min Shock Intensity -->
                            <TextBlock Grid.Row="11" Grid.Column="0" Grid.ColumnSpan="2" Margin="5,2,10,2" Visibility="{Binding PunishmentSettings.PunishmentModEnabled, Converter={StaticResource boolToVisibilityConverter}}" ToolTip="{StaticResource punishmentMinPunishmentIntensityTooltip}" Text="Minimum Punishment Intensity:" />
                            <TextBox Grid.Row="12" Grid.Column="0" Grid.ColumnSpan="2" Visibility="{Binding PunishmentSettings.PunishmentModEnabled, Converter={StaticResource boolToVisibilityConverter}}" ToolTip="{StaticResource punishmentMinPunishmentIntensityTooltip}" Text="{Binding PunishmentSettings.MinPunishmentIntensity, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                            <!-- Max Shock Duration -->
                            <TextBlock Grid.Row="13" Grid.Column="0" Grid.ColumnSpan="2" Margin="5,2,10,2" Visibility="{Binding PunishmentSettings.PunishmentModEnabled, Converter={StaticResource boolToVisibilityConverter}}" ToolTip="{StaticResource punishmentMaxPunishmentDurationTooltip}" Text="Maximum Punishment Duration:" />
                            <TextBox Grid.Row="14" Grid.Column="0" Grid.ColumnSpan="2" Visibility="{Binding PunishmentSettings.PunishmentModEnabled, Converter={StaticResource boolToVisibilityConverter}}" ToolTip="{StaticResource punishmentMaxPunishmentDurationTooltip}" Text="{Binding PunishmentSettings.MaxPunishmentDuration, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                            <!-- Max Shock Intensity -->
                            <TextBlock Grid.Row="15" Grid.Column="0" Grid.ColumnSpan="2" Margin="5,2,10,2" Visibility="{Binding PunishmentSettings.PunishmentModEnabled, Converter={StaticResource boolToVisibilityConverter}}" ToolTip="{StaticResource punishmentMaxPunishmentIntensityTooltip}" Text="Maximum Punishment Intensity:" />
                            <TextBox Grid.Row="16" Grid.Column="0" Grid.ColumnSpan="2" Visibility="{Binding PunishmentSettings.PunishmentModEnabled, Converter={StaticResource boolToVisibilityConverter}}" ToolTip="{StaticResource punishmentMaxPunishmentIntensityTooltip}" Text="{Binding PunishmentSettings.MaxPunishmentIntensity, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                            <!-- Min Fall Distance -->
                            <TextBlock Grid.Row="17" Grid.Column="0" Grid.ColumnSpan="2" Margin="5,2,10,2" Visibility="{Binding PunishmentSettings.PunishmentModEnabled, Converter={StaticResource boolToVisibilityConverter}}" ToolTip="{StaticResource punishmentMinFallTooltip}" Text="Minimum Punishment Fall Distance:" />
                            <TextBox Grid.Row="18" Grid.Column="0" Grid.ColumnSpan="2" Visibility="{Binding PunishmentSettings.PunishmentModEnabled, Converter={StaticResource boolToVisibilityConverter}}" ToolTip="{StaticResource punishmentMinFallTooltip}" Text="{Binding PunishmentSettings.MinFallDistance, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                            <!-- Max Fall Distance -->
                            <TextBlock Grid.Row="19" Grid.Column="0" Grid.ColumnSpan="2" Margin="5,2,10,2" Visibility="{Binding PunishmentSettings.PunishmentModEnabled, Converter={StaticResource boolToVisibilityConverter}}" ToolTip="{StaticResource punishmentMaxFallTooltip}" Text="Maximum Punishment Fall Distance:" />
                            <TextBox Grid.Row="20" Grid.Column="0" Grid.ColumnSpan="2" Visibility="{Binding PunishmentSettings.PunishmentModEnabled, Converter={StaticResource boolToVisibilityConverter}}" ToolTip="{StaticResource punishmentMaxFallTooltip}" Text="{Binding PunishmentSettings.MaxFallDistance, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                            <!-- Punishment Easy Mode -->
                            <TextBlock Grid.Row="21" Grid.Column="0" Margin="5,2,10,2" ToolTip="{StaticResource punishmentPunishmentEasyModeTooltip}" Visibility="{Binding PunishmentSettings.PunishmentModEnabled, Converter={StaticResource boolToVisibilityConverter}}" Text="Punishment Easy Mode: "  />
                            <CheckBox Grid.Row="21" Grid.Column="1" Margin="5,2,10,2" HorizontalAlignment="Right" ToolTip="{StaticResource punishmentPunishmentEasyModeTooltip}" Visibility="{Binding PunishmentSettings.PunishmentModEnabled, Converter={StaticResource boolToVisibilityConverter}}" IsChecked="{Binding PunishmentSettings.PunishmentEasyMode, Mode=TwoWay}" IsEnabled="{Binding PunishmentSettings.ArePunishmentSettingsLoaded}"/>
                            <!-- Rewards Enabled -->
                            <TextBlock Grid.Row="22" Grid.Column="0" Margin="5,2,10,2" ToolTip="{StaticResource punishmentRewardsEnabledTooltip}" Visibility="{Binding PunishmentSettings.PunishmentModEnabled, Converter={StaticResource boolToVisibilityConverter}}" Text="Rewards Enabled: "  />
                            <CheckBox Grid.Row="22" Grid.Column="1" Margin="5,2,10,2" HorizontalAlignment="Right" ToolTip="{StaticResource punishmentRewardsEnabledTooltip}" Visibility="{Binding PunishmentSettings.PunishmentModEnabled, Converter={StaticResource boolToVisibilityConverter}}" IsChecked="{Binding PunishmentSettings.EnabledRewards, Mode=TwoWay}" IsEnabled="{Binding PunishmentSettings.ArePunishmentSettingsLoaded}"/>
                            <!-- Min Reward Duration -->
                            <TextBlock Grid.Row="23" Grid.Column="0" Grid.ColumnSpan="2" Margin="5,2,10,2" Visibility="{Binding PunishmentSettings.PunishmentModEnabled, Converter={StaticResource boolToVisibilityConverter}}" ToolTip="{StaticResource punishmentMinRewardDurationTooltip}" Text="Minimum Reward Duration:" />
                            <TextBox Grid.Row="24" Grid.Column="0" Grid.ColumnSpan="2" Visibility="{Binding PunishmentSettings.PunishmentModEnabled, Converter={StaticResource boolToVisibilityConverter}}" ToolTip="{StaticResource punishmentMinRewardDurationTooltip}" Text="{Binding PunishmentSettings.MinRewardDuration, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                            <!-- Min Reward Intensity -->
                            <TextBlock Grid.Row="25" Grid.Column="0" Grid.ColumnSpan="2" Margin="5,2,10,2" Visibility="{Binding PunishmentSettings.PunishmentModEnabled, Converter={StaticResource boolToVisibilityConverter}}" ToolTip="{StaticResource punishmentMinRewardIntensityTooltip}" Text="Minimum Reward Intensity:" />
                            <TextBox Grid.Row="26" Grid.Column="0" Grid.ColumnSpan="2" Visibility="{Binding PunishmentSettings.PunishmentModEnabled, Converter={StaticResource boolToVisibilityConverter}}" ToolTip="{StaticResource punishmentMinRewardIntensityTooltip}" Text="{Binding PunishmentSettings.MinRewardIntensity, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                            <!-- Max Reward Duration -->
                            <TextBlock Grid.Row="27" Grid.Column="0" Grid.ColumnSpan="2" Margin="5,2,10,2" Visibility="{Binding PunishmentSettings.PunishmentModEnabled, Converter={StaticResource boolToVisibilityConverter}}" ToolTip="{StaticResource punishmentMaxRewardDurationTooltip}" Text="Maximum Reward Duration:" />
                            <TextBox Grid.Row="28" Grid.Column="0" Grid.ColumnSpan="2" Visibility="{Binding PunishmentSettings.PunishmentModEnabled, Converter={StaticResource boolToVisibilityConverter}}" ToolTip="{StaticResource punishmentMaxRewardDurationTooltip}" Text="{Binding PunishmentSettings.MaxRewardDuration, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                            <!-- Max Reward Intensity -->
                            <TextBlock Grid.Row="29" Grid.Column="0" Grid.ColumnSpan="2" Margin="5,2,10,2" Visibility="{Binding PunishmentSettings.PunishmentModEnabled, Converter={StaticResource boolToVisibilityConverter}}" ToolTip="{StaticResource punishmentMaxRewardIntensityTooltip}" Text="Maximum Reward Intensity:" />
                            <TextBox Grid.Row="30" Grid.Column="0" Grid.ColumnSpan="2" Visibility="{Binding PunishmentSettings.PunishmentModEnabled, Converter={StaticResource boolToVisibilityConverter}}" ToolTip="{StaticResource punishmentMaxRewardIntensityTooltip}" Text="{Binding PunishmentSettings.MaxRewardIntensity, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                            <!-- Min Progress Distance -->
                            <TextBlock Grid.Row="31" Grid.Column="0" Grid.ColumnSpan="2" Margin="5,2,10,2" Visibility="{Binding PunishmentSettings.PunishmentModEnabled, Converter={StaticResource boolToVisibilityConverter}}" ToolTip="{StaticResource punishmentMinProgressTooltip}" Text="Minimum Reward Progress Distance:" />
                            <TextBox Grid.Row="32" Grid.Column="0" Grid.ColumnSpan="2" Visibility="{Binding PunishmentSettings.PunishmentModEnabled, Converter={StaticResource boolToVisibilityConverter}}" ToolTip="{StaticResource punishmentMinProgressTooltip}" Text="{Binding PunishmentSettings.MinRewardDistance, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                            <!-- Max Progress Distance -->
                            <TextBlock Grid.Row="33" Grid.Column="0" Grid.ColumnSpan="2" Margin="5,2,10,2" Visibility="{Binding PunishmentSettings.PunishmentModEnabled, Converter={StaticResource boolToVisibilityConverter}}" ToolTip="{StaticResource punishmentMaxProgressTooltip}" Text="Maximum Reward Progress Distance:" />
                            <TextBox Grid.Row="34" Grid.Column="0" Grid.ColumnSpan="2" Visibility="{Binding PunishmentSettings.PunishmentModEnabled, Converter={StaticResource boolToVisibilityConverter}}" ToolTip="{StaticResource punishmentMaxProgressTooltip}" Text="{Binding PunishmentSettings.MaxRewardDistance, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                            <!-- Reward Progress Only -->
                            <TextBlock Grid.Row="35" Grid.Column="0" Margin="5,2,10,2" ToolTip="{StaticResource punishmentPunishmentEasyModeTooltip}" Visibility="{Binding PunishmentSettings.PunishmentModEnabled, Converter={StaticResource boolToVisibilityConverter}}" Text="Reward On New Progress Only: "  />
                            <CheckBox Grid.Row="35" Grid.Column="1" Margin="5,2,10,2" HorizontalAlignment="Right" ToolTip="{StaticResource punishmentRewardProgressOnlyTooltip}" Visibility="{Binding PunishmentSettings.PunishmentModEnabled, Converter={StaticResource boolToVisibilityConverter}}" IsChecked="{Binding PunishmentSettings.RewardProgressOnlyMode, Mode=TwoWay}" IsEnabled="{Binding PunishmentSettings.ArePunishmentSettingsLoaded}"/>
                        </Grid>
                    </TabItem>
                    
    <!-- Fall Damage now handled by dynamic setting creation of Modifiers
                    <TabItem x:Name="tabFallDamage" Header="Fall Damage">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <Grid.Resources>
                                <ToolTip x:Key="fallDamageTooltip" DataContext="{Binding Path=PlacementTarget, RelativeSource={x:Static RelativeSource.Self}}">
                                    <TextBlock>
                                        When enabled the King will take damage every time he 'splats' on the ground. If your health hits 0 you must restart the map!
                                    </TextBlock>
                                </ToolTip>
                                <ToolTip x:Key="fallDamageModifierTooltip" DataContext="{Binding Path=PlacementTarget, RelativeSource={x:Static RelativeSource.Self}}">
                                    <TextBlock>
                                        A value of 0.1 will mean you take ~48 damage for a full screen of falling. A value of 0.05 is recommended for intermediate players.
                                    </TextBlock>
                                </ToolTip>
                                <ToolTip x:Key="fallDamageBloodTooltip" DataContext="{Binding Path=PlacementTarget, RelativeSource={x:Static RelativeSource.Self}}">
                                    <TextBlock>
                                        If enabled a 'splat' will leave a blood splat on the stage when you land
                                    </TextBlock>
                                </ToolTip>
                                <ToolTip x:Key="fallDamageClearBloodTooltip" DataContext="{Binding Path=PlacementTarget, RelativeSource={x:Static RelativeSource.Self}}">
                                    <TextBlock>
                                        When pressed all blood splatters will be cleared
                                    </TextBlock>
                                </ToolTip>
                                <ToolTip x:Key="fallDamageNiceSpawnsTooltip" DataContext="{Binding Path=PlacementTarget, RelativeSource={x:Static RelativeSource.Self}}">
                                    <TextBlock>
                                        If enabled then dying from fall damage on a DLC map will reset you to the start of
                                        <LineBreak/>
                                        the DLC map instead of the bottom of the base map.
                                    </TextBlock>
                                </ToolTip>
                            </Grid.Resources>
                            <TextBlock Grid.Row="0" Grid.Column="0" Margin="5,2,10,2" ToolTip="{StaticResource fallDamageTooltip}" Text="Enabled: " />
                            <CheckBox Grid.Row="0" Grid.Column="1" Margin="5,2,10,2" HorizontalAlignment="Right" ToolTip="{StaticResource fallDamageTooltip}" IsChecked="{Binding ModifiersSettings.FallDamageEnabled, Mode=TwoWay}" IsEnabled="{Binding ModifiersSettings.AreFallDamageModSettingsLoaded}"/>
                            <TextBlock Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="2" Margin="5,2,10,2" FontSize="9" TextWrapping="Wrap">
                                <Italic>
                                    This mode will be inactive by default in game. 
                                    <LineBreak/>
                                    Use the below Toggle Key to activate it once you start playing!
                                </Italic>
                            </TextBlock>
                            <Separator Grid.Row="2" Grid.Column="0" Grid.ColumnSpan="2" Visibility="{Binding ModifiersSettings.FallDamageEnabled, Converter={StaticResource boolToVisibilityConverter}}"/>
                            <TextBlock Grid.Row="3" Grid.Column="0" Grid.ColumnSpan="2" Margin="5,2,10,2" ToolTip="{StaticResource fallDamageTooltip}" Visibility="{Binding ModifiersSettings.FallDamageEnabled, Converter={StaticResource boolToVisibilityConverter}}" Text="Toggle Key:" />
                            <ComboBox Grid.Row="4" Grid.Column="0" Grid.ColumnSpan="2" ToolTip="{StaticResource fallDamageTooltip}" IsEnabled="{Binding ModifiersSettings.AreFallDamageModSettingsLoaded}" Visibility="{Binding ModifiersSettings.FallDamageEnabled, Converter={StaticResource boolToVisibilityConverter}}" ItemsSource="{Binding Source={StaticResource keysEnumValues}}" SelectedItem="{Binding ModifiersSettings.FallDamageToggleKey, Mode=TwoWay}"/>
                            <TextBlock Grid.Row="5" Grid.Column="0" Grid.ColumnSpan="2" Margin="5,2,10,2" ToolTip="{StaticResource fallDamageModifierTooltip}" Visibility="{Binding ModifiersSettings.FallDamageEnabled, Converter={StaticResource boolToVisibilityConverter}}" Text="Fall Damage Modifier:" />
                            <TextBox Grid.Row="6" Grid.Column="0" Grid.ColumnSpan="2" ToolTip="{StaticResource fallDamageModifierTooltip}" IsEnabled="{Binding ModifiersSettings.AreFallDamageModSettingsLoaded}" Visibility="{Binding ModifiersSettings.FallDamageEnabled, Converter={StaticResource boolToVisibilityConverter}}" Text="{Binding ModifiersSettings.FallDamageModifier, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                            <TextBlock Grid.Row="7" Grid.Column="0" Margin="5,2,10,2" ToolTip="{StaticResource fallDamageNiceSpawnsTooltip}" Visibility="{Binding ModifiersSettings.FallDamageEnabled, Converter={StaticResource boolToVisibilityConverter}}" Text="Nice Spawns: " />
                            <CheckBox Grid.Row="7" Grid.Column="1" Margin="5,2,10,2" HorizontalAlignment="Right" ToolTip="{StaticResource fallDamageNiceSpawnsTooltip}" Visibility="{Binding ModifiersSettings.FallDamageEnabled, Converter={StaticResource boolToVisibilityConverter}}" IsChecked="{Binding ModifiersSettings.FallDamageNiceSpawns, Mode=TwoWay}" IsEnabled="{Binding ModifiersSettings.AreFallDamageModSettingsLoaded}"/>
                            <TextBlock Grid.Row="8" Grid.Column="0" Margin="5,2,10,2" ToolTip="{StaticResource fallDamageBloodTooltip}" Visibility="{Binding ModifiersSettings.FallDamageEnabled, Converter={StaticResource boolToVisibilityConverter}}" Text="Blood Splat Enabled: " />
                            <CheckBox Grid.Row="8" Grid.Column="1" Margin="5,2,10,2" HorizontalAlignment="Right" ToolTip="{StaticResource fallDamageBloodTooltip}" Visibility="{Binding ModifiersSettings.FallDamageEnabled, Converter={StaticResource boolToVisibilityConverter}}" IsChecked="{Binding ModifiersSettings.FallDamageBloodSplatEnabled, Mode=TwoWay}" IsEnabled="{Binding ModifiersSettings.AreFallDamageModSettingsLoaded}"/>
                            <TextBlock Grid.Row="9" Grid.Column="0" Grid.ColumnSpan="2" Margin="5,2,10,2" ToolTip="{StaticResource fallDamageClearBloodTooltip}" Visibility="{Binding ModifiersSettings.FallDamageBloodSplatVisibility, Converter={StaticResource boolToVisibilityConverter}}" Text="Clear Blood Key:" />
                            <ComboBox Grid.Row="10" Grid.Column="0" Grid.ColumnSpan="2" ToolTip="{StaticResource fallDamageClearBloodTooltip}" IsEnabled="{Binding ModifiersSettings.AreFallDamageModSettingsLoaded}" Visibility="{Binding ModifiersSettings.FallDamageBloodSplatVisibility, Converter={StaticResource boolToVisibilityConverter}}" ItemsSource="{Binding Source={StaticResource keysEnumValues}}" SelectedItem="{Binding ModifiersSettings.FallDamageClearBloodKey, Mode=TwoWay}"/>
                        </Grid>
                    </TabItem>
-->

    <!-- Resizing was used by Rainhoe as a one-only, not supported otherwise
                    <TabItem x:Name="tabItemResizing" Header="Resizing">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <Grid.Resources>
                                <ToolTip x:Key="resizingTooltip" DataContext="{Binding Path=PlacementTarget, RelativeSource={x:Static RelativeSource.Self}}">
                                    <TextBlock>
                                        Will allow you to resize the window with the specified Grow and Shrink Keys!
                                    </TextBlock>
                                </ToolTip>
                            </Grid.Resources>
                            <TextBlock Grid.Row="0" Grid.Column="0" Margin="5,2,10,2" ToolTip="{StaticResource resizingTooltip}" Text="Enabled: "/>
                            <CheckBox Grid.Row="0" Grid.Column="1" Margin="5,2,10,2" HorizontalAlignment="Right" ToolTip="{StaticResource resizingTooltip}" IsChecked="{Binding ModifiersSettings.ManualResizingEnabled, Mode=TwoWay}" IsEnabled="{Binding ModifiersSettings.AreFallDamageModSettingsLoaded}"/>
                            <TextBlock Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="2" Margin="5,2,10,2" FontSize="9" TextWrapping="Wrap">
                                <Italic>
                                    This works best in Borderless or Windowed mode!
                                    <LineBreak/>
                                    Use the below Toggle Key to activate it once you start playing!
                                </Italic>
                            </TextBlock>
                            <Separator Grid.Row="2" Grid.Column="0" Grid.ColumnSpan="2" Visibility="{Binding ModifiersSettings.ManualResizingEnabled, Converter={StaticResource boolToVisibilityConverter}}"/>
                            <TextBlock Grid.Row="3" Grid.Column="0" Grid.ColumnSpan="2" Margin="5,2,10,2" ToolTip="{StaticResource resizingTooltip}" Visibility="{Binding ModifiersSettings.ManualResizingEnabled, Converter={StaticResource boolToVisibilityConverter}}" Text="Toggle Key:" />
                            <ComboBox Grid.Row="4" Grid.Column="0" Grid.ColumnSpan="2" ToolTip="{StaticResource resizingTooltip}" IsEnabled="{Binding ModifiersSettings.AreFallDamageModSettingsLoaded}" Visibility="{Binding ModifiersSettings.ManualResizingEnabled, Converter={StaticResource boolToVisibilityConverter}}" ItemsSource="{Binding Source={StaticResource keysEnumValues}}" SelectedItem="{Binding ModifiersSettings.ManualResizingToggleKey, Mode=TwoWay}"/>
                            <TextBlock Grid.Row="5" Grid.Column="0" Grid.ColumnSpan="2" Margin="5,2,10,2" ToolTip="{StaticResource resizingTooltip}" Visibility="{Binding ModifiersSettings.ManualResizingEnabled, Converter={StaticResource boolToVisibilityConverter}}" Text="Grow Key:" />
                            <ComboBox Grid.Row="6" Grid.Column="0" Grid.ColumnSpan="2" ToolTip="{StaticResource resizingTooltip}" IsEnabled="{Binding ModifiersSettings.AreFallDamageModSettingsLoaded}" Visibility="{Binding ModifiersSettings.ManualResizingEnabled, Converter={StaticResource boolToVisibilityConverter}}" ItemsSource="{Binding Source={StaticResource keysEnumValues}}" SelectedItem="{Binding ModifiersSettings.ManualResizingGrowKey, Mode=TwoWay}"/>
                            <TextBlock Grid.Row="7" Grid.Column="0" Grid.ColumnSpan="2" Margin="5,2,10,2" ToolTip="{StaticResource resizingTooltip}" Visibility="{Binding ModifiersSettings.ManualResizingEnabled, Converter={StaticResource boolToVisibilityConverter}}" Text="Shrink Key:" />
                            <ComboBox Grid.Row="8" Grid.Column="0" Grid.ColumnSpan="2" ToolTip="{StaticResource resizingTooltip}" IsEnabled="{Binding ModifiersSettings.AreFallDamageModSettingsLoaded}" Visibility="{Binding ModifiersSettings.ManualResizingEnabled, Converter={StaticResource boolToVisibilityConverter}}" ItemsSource="{Binding Source={StaticResource keysEnumValues}}" SelectedItem="{Binding ModifiersSettings.ManualResizingShrinkKey, Mode=TwoWay}"/>
                        </Grid>
                    </TabItem>           
    -->

    <!-- Rising Lava replaced by dynamic setting creation for Modifiers
                    <TabItem x:Name="tabRisingLava" Header="Rising Lava">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <Grid.Resources>
                                <ToolTip x:Key="risingLavaTooltip" DataContext="{Binding Path=PlacementTarget, RelativeSource={x:Static RelativeSource.Self}}">
                                    <TextBlock>
                                        Lava will raise up the map slowly, if you make contact with it you must restart!
                                    </TextBlock>
                                </ToolTip>
                                <ToolTip x:Key="risingLavaNiceSpawnsTooltip" DataContext="{Binding Path=PlacementTarget, RelativeSource={x:Static RelativeSource.Self}}">
                                    <TextBlock>
                                        If enabled then touching the lava on a DLC map will reset you to the start of
                                        <LineBreak/>
                                        the DLC map instead of the bottom of the base map.
                                    </TextBlock>
                                </ToolTip>
                            </Grid.Resources>
                            <TextBlock Grid.Row="0" Grid.Column="0" Margin="5,2,10,2" ToolTip="{StaticResource risingLavaTooltip}" Text="Enabled: "/>
                            <CheckBox Grid.Row="0" Grid.Column="1" Margin="5,2,10,2" HorizontalAlignment="Right" ToolTip="{StaticResource risingLavaTooltip}" IsChecked="{Binding ModifiersSettings.RisingLavaEnabled, Mode=TwoWay}" IsEnabled="{Binding ModifiersSettings.AreFallDamageModSettingsLoaded}"/>
                            <TextBlock Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="2" Margin="5,2,10,2" FontSize="9" TextWrapping="Wrap">
                                <Italic>
                                    This mode will be inactive by default in game. 
                                    <LineBreak/>
                                    Use the below Toggle Key to activate it once you start playing!
                                </Italic>
                            </TextBlock>
                            <Separator Grid.Row="2" Grid.Column="0" Grid.ColumnSpan="2" Visibility="{Binding ModifiersSettings.RisingLavaEnabled, Converter={StaticResource boolToVisibilityConverter}}"/>
                            <TextBlock Grid.Row="3" Grid.Column="0" Grid.ColumnSpan="2" Margin="5,2,10,2" ToolTip="{StaticResource risingLavaTooltip}" Visibility="{Binding ModifiersSettings.RisingLavaEnabled, Converter={StaticResource boolToVisibilityConverter}}" Text="Toggle Key:" />
                            <ComboBox Grid.Row="4" Grid.Column="0" Grid.ColumnSpan="2" ToolTip="{StaticResource risingLavaTooltip}" IsEnabled="{Binding ModifiersSettings.AreFallDamageModSettingsLoaded}" Visibility="{Binding ModifiersSettings.RisingLavaEnabled, Converter={StaticResource boolToVisibilityConverter}}" ItemsSource="{Binding Source={StaticResource keysEnumValues}}" SelectedItem="{Binding ModifiersSettings.RisingLavaToggleKey, Mode=TwoWay}"/>
                            <TextBlock Grid.Row="5" Grid.Column="0" Grid.ColumnSpan="2" Margin="5,2,10,2" ToolTip="{StaticResource risingLavaTooltip}" Visibility="{Binding ModifiersSettings.RisingLavaEnabled, Converter={StaticResource boolToVisibilityConverter}}" Text="Rising Lava Speed:" />
                            <TextBox Grid.Row="6" Grid.Column="0" Grid.ColumnSpan="2" ToolTip="{StaticResource risingLavaTooltip}" IsEnabled="{Binding ModifiersSettings.AreFallDamageModSettingsLoaded}" Visibility="{Binding ModifiersSettings.RisingLavaEnabled, Converter={StaticResource boolToVisibilityConverter}}" Text="{Binding ModifiersSettings.RisingLavaSpeed, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                            <TextBlock Grid.Row="7" Grid.Column="0" Margin="5,2,10,2" ToolTip="{StaticResource risingLavaNiceSpawnsTooltip}" Visibility="{Binding ModifiersSettings.RisingLavaEnabled, Converter={StaticResource boolToVisibilityConverter}}" Text="Nice Spawns: " />
                            <CheckBox Grid.Row="7" Grid.Column="1" Margin="5,2,10,2" HorizontalAlignment="Right" ToolTip="{StaticResource risingLavaNiceSpawnsTooltip}" Visibility="{Binding ModifiersSettings.RisingLavaEnabled, Converter={StaticResource boolToVisibilityConverter}}" IsChecked="{Binding ModifiersSettings.RisingLavaNiceSpawns, Mode=TwoWay}" IsEnabled="{Binding ModifiersSettings.AreFallDamageModSettingsLoaded}"/>
                        </Grid>
                    </TabItem>
-->
                    
    <!-- Chat Relay deprecated
                    <TabItem x:Name="tabItemChatDisplay" Header="Chat Display">
                        <TabItem.Style>
                            <Style TargetType="{x:Type TabItem}">
                                <Setter Property="IsEnabled" Value="False"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding StreamingSettings.IsStreamingOnTwitch}" Value="True">
                                        <Setter Property="IsEnabled" Value="True"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </TabItem.Style>
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <TextBlock Grid.Row="0" Grid.Column="0" Margin="5,2,10,2" Text="Enabled: " />
                            <CheckBox Grid.Row="0" Grid.Column="1" Margin="5,2,10,2" HorizontalAlignment="Right" IsChecked="{Binding ChatDisplayEnabled, Mode=TwoWay}" IsEnabled="{Binding RavensSettings.AreRavenModSettingsLoaded}"/>
                        </Grid>
                    </TabItem>
                    -->
                    
                    <TabItem x:Name="tabItemFly" Header="Fly">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <Grid.Resources>
                                <ToolTip x:Key="freeFlyTooltip" DataContext="{Binding Path=PlacementTarget, RelativeSource={x:Static RelativeSource.Self}}">
                                    <TextBlock>
                                        Allows you to make the Jump King Fly. Enabling this option will disable achievements.
                                    </TextBlock>
                                </ToolTip>
                            </Grid.Resources>
                            <!-- Free Fly Enabled -->
                            <TextBlock Grid.Row="0" Grid.Column="0" Margin="5,2,10,2" ToolTip="{StaticResource freeFlyTooltip}" Text="Enabled: " />
                            <CheckBox Grid.Row="0" Grid.Column="1" Margin="5,2,10,2" HorizontalAlignment="Right" ToolTip="{StaticResource freeFlyTooltip}" IsChecked="{Binding RavensSettings.FreeFlyingEnabled, Mode=TwoWay}" IsEnabled="{Binding RavensSettings.AreRavenModSettingsLoaded}"/>
                            <TextBlock Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="2" Margin="5,2,10,2" FontSize="9" TextWrapping="Wrap">
                                <Italic>
                                    Enabling this option will disable Steam Achievements in the game!
                                </Italic>
                            </TextBlock>
                            <!-- Seperator -->
                            <Separator Grid.Row="2" Grid.Column="0" Grid.ColumnSpan="2" Visibility="{Binding RavensSettings.FreeFlyingEnabled, Converter={StaticResource boolToVisibilityConverter}}"/>
                            <!-- Debug Button -->
                            <TextBlock Grid.Row="3" Grid.Column="0" Grid.ColumnSpan="2" Margin="5,2,10,2" ToolTip="{StaticResource freeFlyTooltip}" Visibility="{Binding RavensSettings.FreeFlyingEnabled, Converter={StaticResource boolToVisibilityConverter}}" Text="Toggle Key:" />
                            <ComboBox Grid.Row="4" Grid.Column="0" Grid.ColumnSpan="2" ToolTip="{StaticResource freeFlyTooltip}" IsEnabled="{Binding RavensSettings.AreRavenModSettingsLoaded}" Visibility="{Binding RavensSettings.FreeFlyingEnabled, Converter={StaticResource boolToVisibilityConverter}}" ItemsSource="{Binding Source={StaticResource keysEnumValues}}" SelectedItem="{Binding RavensSettings.FreeFlyToggleKey, Mode=TwoWay}"/>
                        </Grid>
                    </TabItem>

                    <TabItem x:Name="tabItemModifiers" Header="Modifiers">
                        <Grid x:Name="tabItemModifiersGrid">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>
                            
                            <Grid Grid.Row="0">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                </Grid.RowDefinitions>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>
                                <Grid.Resources>
                                    <ObjectDataProvider x:Key="triggerTypesEnumValues" MethodName="GetValues" ObjectType="{x:Type System:Enum}">
                                        <ObjectDataProvider.MethodParameters>
                                            <x:Type TypeName="modifierSettings:ModifierTriggerTypes"/>
                                        </ObjectDataProvider.MethodParameters>
                                    </ObjectDataProvider>
                                    <ToolTip x:Key="pollDurationTooltip" DataContext="{Binding Path=PlacementTarget, RelativeSource={x:Static RelativeSource.Self}}">
                                        <TextBlock>
                                        The duration the poll is active in seconds
                                        </TextBlock>
                                    </ToolTip>
                                    <ToolTip x:Key="pollClosedTooltip" DataContext="{Binding Path=PlacementTarget, RelativeSource={x:Static RelativeSource.Self}}">
                                        <TextBlock>
                                        The duration that the poll displays the winning choice before enabling it in seconds
                                        </TextBlock>
                                    </ToolTip>
                                    <ToolTip x:Key="pollCooldownTooltip" DataContext="{Binding Path=PlacementTarget, RelativeSource={x:Static RelativeSource.Self}}">
                                        <TextBlock>
                                        The time after a poll is closed before a new one is started in seconds
                                        </TextBlock>
                                    </ToolTip>
                                    <ToolTip x:Key="modifierDurationTooltip" DataContext="{Binding Path=PlacementTarget, RelativeSource={x:Static RelativeSource.Self}}">
                                        <TextBlock>
                                        The time a modifier is active for after being enabled in seconds
                                        </TextBlock>
                                    </ToolTip>
                                </Grid.Resources>
                                
                                <!-- Modifier Trigger -->
                                <Label Grid.Row="0" Grid.Column="0" Margin="5,2,10,2" Content="Modifier Trigger Type:"/>
                                <ComboBox Grid.Row="0" Grid.Column="1" VerticalAlignment="Center" Margin="5,2,10,2" SelectedItem="{Binding ModifiersSettings.TriggerType}" ItemsSource="{Binding Source={StaticResource triggerTypesEnumValues}}"/>

                                <!-- Poll Duration -->
                                <Label Grid.Row="1" Grid.Column="0" Margin="5,2,10,2" ToolTip="{StaticResource pollDurationTooltip}" Visibility="{Binding ModifiersSettings.IsChatPoll, Converter={StaticResource boolToVisibilityConverter}}" Content="Poll Duration:"/>
                                <TextBox Grid.Row="1" Grid.Column="1" VerticalAlignment="Center" Margin="5,2,10,2" ToolTip="{StaticResource pollDurationTooltip}" Visibility="{Binding ModifiersSettings.IsChatPoll, Converter={StaticResource boolToVisibilityConverter}}" Text="{Binding ModifiersSettings.PollDurationInSeconds, Mode=TwoWay, UpdateSourceTrigger=Default}"/>

                                <!-- Poll Closed Duration -->
                                <Label Grid.Row="2" Grid.Column="0" Margin="5,2,10,2" ToolTip="{StaticResource pollClosedTooltip}" Visibility="{Binding ModifiersSettings.IsChatPoll, Converter={StaticResource boolToVisibilityConverter}}" Content="Poll Closed:"/>
                                <TextBox Grid.Row="2" Grid.Column="1" VerticalAlignment="Center" Margin="5,2,10,2" ToolTip="{StaticResource pollClosedTooltip}" Visibility="{Binding ModifiersSettings.IsChatPoll, Converter={StaticResource boolToVisibilityConverter}}" Text="{Binding ModifiersSettings.PollClosedDurationInSeconds, Mode=TwoWay, UpdateSourceTrigger=Default}"/>

                                <!-- Poll Cooldown Duration -->
                                <Label Grid.Row="3" Grid.Column="0" Margin="5,2,10,2" ToolTip="{StaticResource pollCooldownTooltip}" Visibility="{Binding ModifiersSettings.IsChatPoll, Converter={StaticResource boolToVisibilityConverter}}" Content="Poll Cooldown:"/>
                                <TextBox Grid.Row="3" Grid.Column="1" VerticalAlignment="Center" Margin="5,2,10,2" ToolTip="{StaticResource pollCooldownTooltip}" Visibility="{Binding ModifiersSettings.IsChatPoll, Converter={StaticResource boolToVisibilityConverter}}" Text="{Binding ModifiersSettings.TimeBetweenPollsInSeconds, Mode=TwoWay, UpdateSourceTrigger=Default}"/>
                                
                                <!-- Modifier Duration -->
                                <Label Grid.Row="4" Grid.Column="0" Margin="5,2,10,2" ToolTip="{StaticResource modifierDurationTooltip}" Visibility="{Binding ModifiersSettings.IsChatPoll, Converter={StaticResource boolToVisibilityConverter}}" Content="Modifier Duration:"/>
                                <TextBox Grid.Row="4" Grid.Column="1" VerticalAlignment="Center" Margin="5,2,10,2" ToolTip="{StaticResource modifierDurationTooltip}" Visibility="{Binding ModifiersSettings.IsChatPoll, Converter={StaticResource boolToVisibilityConverter}}" Text="{Binding ModifiersSettings.ModifierDurationInSeconds, Mode=TwoWay, UpdateSourceTrigger=Default}"/>
                            </Grid>

                            <Separator Grid.Row="1"/>
                        </Grid>
                    </TabItem>
                </TabControl>
                <!-- Update Settings Button-->
                <StackPanel Grid.Row="3" Orientation="Horizontal" HorizontalAlignment="Right">
                    <Button Content="Save Settings" MaxWidth="100" MinWidth="100" Margin="5" HorizontalAlignment="Right" Command="{Binding UpdateSettingsCommand}"/>
                    <Button Content="Load Settings" MaxWidth="100" MinWidth="100" Margin="5" HorizontalAlignment="Right" Command="{Binding LoadSettingsCommand}"/>
                </StackPanel>
            </Grid>
        </GroupBox>
    </DockPanel>
</Window>
